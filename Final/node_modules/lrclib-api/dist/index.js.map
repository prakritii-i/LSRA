{"version":3,"sources":["/workspaces/lrclib-api/packages/lrclib-api/dist/index.js","../src/errors/NotFound.ts","../src/errors/RequestError.ts","../src/utils.ts","../src/client.ts"],"names":[],"mappings":"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","file":"/workspaces/lrclib-api/packages/lrclib-api/dist/index.js","sourcesContent":[null,"export class NotFoundError extends Error {\n  constructor() {\n    super(\"Track was not found\");\n  }\n}\nexport class NoResultError extends Error {\n  constructor() {\n    super(\"No result was found\");\n  }\n}\n","export class RequestError extends Error {\n  constructor(error?: string) {\n    super(\"Request error \" + error);\n  }\n}\n\nexport class KeyError extends Error {\n  constructor(error?: string) {\n    super(\"The key has not been configured.\");\n  }\n}\n","import { LyricLine, ParsedLyrics } from \"./types/Utils\";\n\n/**\n * Parses song lyrics into a structured format by removing metadata tags and separating lines.\n *\n * Example Input:\n * ```\n * [00:27.93] Listen to the wind blow\n * [00:30.88] Watch the sun rise\n * ```\n *\n * Example Output:\n * {\n *   synced: [{ text: \"Listen to the wind blow\", startTime: 27930 }, { text: \"Watch the sun rise\", startTime: 30880 }],\n *   unsynced: []\n * }\n *\n * @param lyrics - The raw lyrics string with optional tags and timestamps\n * @returns A ParsedLyrics object containing structured lyric data\n */\nfunction parseLocalLyrics(lyrics: string): ParsedLyrics {\n  // Preprocess lyrics by removing [tags] (e.g., [artist:Name]) and trimming extra whitespace\n  const lines = lyrics\n    .replace(/\\[[a-zA-Z]+:.+\\]/g, \"\") // Removes metadata tags like [artist:Name]\n    .trim()\n    .split(\"\\n\"); // Splits the lyrics into an array of lines\n\n  // Regular expressions for matching synced and karaoke timestamps\n  const syncedTimestamp = /\\[([0-9:.]+)\\]/; // Matches [00:12.34]\n\n  const unsynced: LyricLine[] = []; // Array to store unsynchronized lyrics\n  const synced: LyricLine[] = []; // Array to store synchronized lyrics\n\n  // Process each line to extract lyrics and timing information\n  lines.forEach((line) => {\n    // Match synchronized lyrics\n    const syncMatch = line.match(syncedTimestamp);\n    if (syncMatch) {\n      const startTime = parseTime(syncMatch[1]);\n      const text = line.replace(syncedTimestamp, \"\").trim();\n      if (text) {\n        synced.push({ text, startTime });\n      }\n    }\n    // Add to unsynchronized lyrics if no timestamps are found\n    else {\n      const text = line.trim();\n      if (text) {\n        unsynced.push({ text });\n      }\n    }\n  });\n\n  return {\n    synced: synced.length > 0 ? synced : null,\n    unsynced,\n  };\n}\n\n/**\n * Converts a timestamp string in the format \"mm:ss\" or \"mm:ss.SSS\" to a number in seconds.\n *\n * @param time - The timestamp string to parse\n * @returns The time in seconds as a number\n */\nfunction parseTime(time: string): number {\n  const [minutes, seconds] = time.split(\":\").map(Number);\n  return minutes * 60 + seconds;\n}\n\nexport { parseLocalLyrics, parseTime };\n","import { KeyError, NoResultError, NotFoundError, RequestError } from \"./errors\";\nimport { ChallengeResponse, ClientOptions } from \"./types/Client\";\nimport {\n  FindLyricsResponse,\n  PublishLyrics,\n  Query,\n  Search,\n} from \"./types/Lyrics\";\nimport { LyricLine } from \"./types/Utils\";\nimport { parseLocalLyrics } from \"./utils\";\n\nexport class Client {\n  private _url: string = \"https://lrclib.net/api\";\n  private _key: string | undefined;\n  /**\n   * Creates a request client to api\n   *\n   * Example Usage;\n   * ```typescript\n   * const client = new Client();\n   *\n   * client.findLyrics({ track_name: \"The Chain\", artist_name: \"Fleetwood Mac\" }).then(console.log);\n   * ```\n   *\n   * @notigorwastaken: I'm still working on it.\n   *\n   * @param options - An optional object containing Client Options\n   *  - `url`: The base URL, e.g. you can set up a custom url that uses another lrclib.net instance\n   *  - `key`: The token used to publish lyrics to the api. [click here for more info](https://lrclib.net/docs)\n   */\n  constructor(options?: ClientOptions) {\n    this._url = options?.url || this._url;\n    this._key = options?.key;\n  }\n  private async request(\n    path: string,\n    options?: RequestInit,\n  ): Promise<Response> {\n    return await fetch(this._url + path, options);\n  }\n  private async post(\n    path: string,\n    body: any,\n    options?: RequestInit,\n  ): Promise<string> {\n    if (!this._key) throw new KeyError();\n    const response = await fetch(this._url + path, {\n      ...options,\n      headers: {\n        \"X-Publish-Token\": this._key,\n      },\n      body: JSON.stringify(body),\n      method: \"post\",\n    });\n    if (response.status !== 201) throw await response.json();\n    return await response.text();\n  }\n  private async postAlt(\n    path: string,\n    headers?: any,\n    body?: any,\n    options?: RequestInit,\n  ): Promise<Response> {\n    return await fetch(this._url + path, {\n      method: \"post\",\n      headers,\n      body: body,\n      ...options,\n    });\n  }\n  /**\n   * Sends a request to the lyrics search API at https://lrclib.net/api/search.\n   *\n   * Example Usage:\n   * ```typescript\n   * const search = await searchLyrics({ query: \"The Chain\" });\n   * ```\n   *\n   * @param info - An object containing search parameters:\n   *  - `query`: The search term (conditional | e.g., song title or lyrics fragment).\n   *  - `track_name`: The name of the track (conditional).\n   *  - `artist_name`: The artist's name (optional).\n   *  - `duration`: The song duration in milliseconds (optional).\n   *\n   * @returns A promise that resolves to an array of {@link FindLyricsResponse | FindLyricsResponse[]}.\n   */\n  public async searchLyrics(\n    info: Search,\n    options?: RequestInit,\n  ): Promise<FindLyricsResponse[]> {\n    const baseURL = \"/search\";\n    const params = {\n      q: info.query || \"\",\n      track_name: info.track_name || \"\",\n      artist_name: info.artist_name || \"\",\n      duration: info.duration ? info.duration / 1000 : \"\",\n    };\n    const finalURL = `${baseURL}?${Object.entries(params)\n      .filter(([_, value]) => value !== undefined && value !== \"\")\n      .map(([key, value]) => `${key}=${encodeURIComponent(value as string)}`)\n      .join(\"&\")}`;\n    const response = await this.request(finalURL, options);\n\n    if (!response.ok) {\n      throw new RequestError();\n    }\n    const body = await response.json();\n\n    if (!body) {\n      throw new NoResultError();\n    }\n\n    return body;\n  }\n\n  /**\n   * Finds lyrics for a given track using the API at https://lrclib.net/api/get.\n   *\n   * Example Usage:\n   * ```typescript\n   * const lyrics = await findLyrics({ track_name: \"The Chain\", artist_name: \"Fleetwood Mac\" });\n   * ```\n   *\n   * @param info - An object containing query parameters:\n   *  - `id`: The unique identifier of the track (conditional).\n   *  - `track_name`: The name of the track (conditional).\n   *  - `artist_name`: The artist's name (conditional).\n   *  - `album_name`: The album's name (optional).\n   *  - `duration`: The song duration in milliseconds (optional).\n   *\n   * @returns A promise that resolves to a {@link FindLyricsResponse | FindLyricsResponse} object containing the track's lyrics.\n   * @throws Will throw an error if the request fails or the track is not found.\n   */\n  public async findLyrics(\n    info: Query,\n    options?: RequestInit,\n  ): Promise<FindLyricsResponse> {\n    const parseID = info.id ? `/${info.id}` : \"?\";\n    const baseURL = \"/get\" + parseID;\n    const durr = info?.duration ? info.duration / 1000 : undefined;\n    const params = {\n      track_name: info.track_name || \"\",\n      artist_name: info.artist_name || \"\",\n      album_name: info.album_name || \"\",\n      duration: durr || \"\",\n    };\n\n    const finalURL = `${baseURL}${Object.entries(params)\n      .filter(([_, value]) => value !== undefined && value !== \"\")\n      .map(([key, value]) => `${key}=${encodeURIComponent(value as string)}`)\n      .join(\"&\")}`;\n\n    const response = await this.request(finalURL, options);\n    if (!response.ok && response.status === 404) {\n      throw new NotFoundError();\n    } else if (!response.ok && response.status !== 200) {\n      throw new RequestError(response.statusText);\n    }\n\n    const body = await response.json();\n\n    return body;\n  }\n\n  /**\n   * Retrieves unsynchronized (plain) lyrics for a given track.\n   *\n   * Example Usage:\n   * ```typescript\n   * const unsyncedLyrics = await getUnsynced({ track_name: \"The Chain\", artist_name: \"Fleetwood Mac\" });\n   * ```\n   *\n   * @param info - An object containing query parameters:\n   *  - `id`: The unique identifier of the track (conditional).\n   *  - `track_name`: The name of the track (conditional).\n   *  - `artist_name`: The artist's name (conditional).\n   *  - `album_name`: The album's name (optional).\n   *  - `duration`: The song duration in milliseconds (optional).\n   *\n   * @returns A promise that resolves to an array of {@link LyricLine | LyricLine[]} objects\n   *          containing unsynchronized lyrics or `null` if no lyrics are found.\n   */\n  public async getUnsynced(info: Query): Promise<LyricLine[] | null> {\n    try {\n      const body = await this.findLyrics(info);\n      if (\"error\" in body) return null;\n\n      const unsyncedLyrics = body?.plainLyrics;\n      const isInstrumental = body.instrumental;\n      if (isInstrumental) return [{ text: \"[Instrumental]\" }];\n\n      if (!unsyncedLyrics) return null;\n\n      return parseLocalLyrics(unsyncedLyrics).unsynced;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }\n\n  /**\n   * Retrieves synchronized (timed) lyrics for a given track.\n   *\n   * Example Usage:\n   * ```typescript\n   * const syncedLyrics = await getSynced({ track_name: \"The Chain\", artist_name: \"Fleetwood Mac\" });\n   * ```\n   *\n   * @param info - An object containing query parameters:\n   *  - `id`: The unique identifier of the track (conditional).\n   *  - `track_name`: The name of the track (conditional).\n   *  - `artist_name`: The artist's name (conditional).\n   *  - `album_name`: The album's name (optional).\n   *  - `duration`: The song duration in milliseconds (optional).\n   *\n   * @returns A promise that resolves to an array of {@link LyricLine | LyricLine[]} objects\n   *          containing synchronized lyrics or `null` if no lyrics are found.\n   */\n  public async getSynced(info: Query): Promise<LyricLine[] | null> {\n    try {\n      const body = await this.findLyrics(info);\n      const syncedLyrics = body?.syncedLyrics;\n      const isInstrumental = body.instrumental;\n      if (isInstrumental) return [{ text: \"[Instrumental]\" }];\n\n      if (!syncedLyrics) return null;\n\n      return parseLocalLyrics(syncedLyrics).synced;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n  }\n  public async requestChallenge(): Promise<ChallengeResponse | null> {\n    try {\n      const challenge = await this.postAlt(\"/request-challenge\");\n      if (!challenge.ok) throw new RequestError(challenge.statusText);\n      const response = await challenge.json();\n      if (!response.prefix || !response.target) return null;\n      return {\n        prefix: response.prefix,\n        target: response.target,\n      };\n    } catch (e: any) {\n      throw new Error(e?.message ?? \"Unknown Error\");\n    }\n  }\n  /**\n   * This is an experimental function / API.\n   \n  public async publishLyrics(info: PublishLyrics) {\n    try {\n      const challenge = await this.requestChallenge();\n      const response = await this.postAlt(\n        \"/publish\",\n        {\n          \"X-Publish-Token\":\n            challenge?.prefix +\n            \":\" +\n            solveChallenge(\n              challenge?.prefix as string,\n              challenge?.target as string,\n            ),\n          \"content-type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        {\n          track_name: info.trackName,\n          artist_name: info.artistName,\n          album_name: info.albumName,\n          duration: info.duration,\n          plain_lyrics: info.plainLyrics,\n          synced_lyrics: \"\",\n        },\n      );\n      return response;\n    } catch (e: any) {\n      throw new Error(e?.message ?? \"Unknown Error\");\n    }\n  }*/\n}\n"]}