here's an example of how the dataset is in the muse dataset:
lastfm_url,track,artist,seeds,number_of_emotion_tags,valence_tags,arousal_tags,dominance_tags,mbid,spotify_id,genre
https://www.last.fm/music/eminem/_/%2527till%2bi%2bcollapse,'Till I Collapse, Eminem,['aggressive'],6,4.55,5.273125,5.690625,cab93def-26c5-4fb0-bedd-26ec4c1619e1,4xkOaSrkexMciUUogZKVTS,rap


as for the task of sentiment analysis, we don't need anything else other than song title and emotion label. as of emotion label most songs have multiple emotion labels such as :
"['aggressive', 'confrontational', 'intense', 'epic', 'desperate']"

but the first emotion seems to be the dominant one so we're gonna have to ignore the rest i.e separating the rest emotion label and labelling each songs with just single label 

then a new dataset with single emotion label is to be formed based on which the lyrics will be fetched using the lrclib api.






and I also counted the each songs based on the primary emotions the results are:
primary_emotion,count
aggressive,1000
sleazy,958
lonely,946
angry,944
lazy,935
sarcastic,934
intense,932
fierce,931
dreamy,926
dark,920
gloomy,915
eerie,895
fun,893
cheerful,892
organic,882
romantic,882
positive,880
gentle,880
uplifting,867
erotic,858
relaxed,852
lyrical,850
harsh,848
gritty,843
lush,840
soothing,836
exotic,834
epic,820
martial,813
cold,806
optimistic,804
delicate,800
playful,781
mysterious,779
intimate,778
technical,777
warm,776
sexy,770
nocturnal,761
serious,760
light,758
spooky,757
spiritual,754
dramatic,746
silly,745
thoughtful,740
scary,738
meditative,735
bitter,734
sacred,731
nostalgic,730
smooth,729
sentimental,717
melancholy,708
bright,705
euphoric,701
humorous,700
sensual,697
whimsical,696
witty,696
eccentric,694
ominous,687
elegant,686
mystical,684
poignant,682
bittersweet,682
happy,681
tender,681
passionate,661
introspective,648
energetic,644
powerful,643
ethereal,642
stylish,639
sexual,628
exciting,619
ironic,605
hypnotic,599
lively,593
sweet,582
halloween,571
peaceful,568
brooding,551
calm,551
reflective,550
quiet,548
complex,545
theatrical,539
strong,537
quirky,523
driving,500
defiant,491
narrative,480
mellow,478
apocalyptic,476
soft,475
wistful,472
atmospheric,465
trippy,462
sad,457
pure,450
sophisticated,446
earthy,439
spacey,439
cerebral,409
hyper,406
paranoid,402
negative,393
slick,388
philosophical,362
crunchy,362
monumental,356
menacing,349
yearning,328
tragic,310
triumphant,284
rousing,279
provocative,277
cathartic,276
summery,270
bleak,266
flashy,253
grim,241
flowing,239
enigmatic,233
manic,227
sparse,224
urgent,217
desperate,212
autumnal,208
comic,207
joyous,206
explosive,203
carefree,200
naive,197
confrontational,185
demonic,181
tense,179
somber,175
mechanical,174
innocent,166
literate,158
bombastic,156
trashy,155
pastoral,153
rustic,148
cynical,146
earnest,145
laid-back,144
nervous,142
messy,141
unsettling,139
rebellious,138
sparkling,132
precious,128
shimmering,126
spicy,126
confident,125
macabre,125
airy,124
savage,124
devotional,120
druggy,116
ecstatic,111
brash,109
wry,98
anxious,92
sardonic,79
clinical,74
elegiac,72
thrilling,70
fractured,67
ambitious,67
graceful,62
campy,60
animated,60
difficult,59
reckless,58
detached,57
volatile,56
searching,55
mighty,55
brassy,54
hostile,54
perky,53
rowdy,52
visceral,50
nihilistic,48
elaborate,48
fiery,47
plaintive,46
satirical,45
narcotic,45
weary,45
exuberant,42
monastic,42
freewheeling,42
angst-ridden,40
hungry,40
child-like,40
reassuring,39
indulgent,39
outrageous,38
brittle,35
greasy,35
uncompromising,33
kinetic,31
wintry,30
noble,29
transparent,28
street-smart,26
understated,25
acerbic,25
suspenseful,24
marching,24
sprawling,24
raucous,24
refined,23
bravado,22
sugary,21
circular,20
self-conscious,18
rollicking,18
malevolent,17
giddy,17
languid,16
meandering,16
scary music,16
stately,16
thuggish,15
rambunctious,15
irreverent,15
swaggering,14
celebratory,13
threatening,13
reverent,12
gutsy,12
boisterous,11
snide,11
gleeful,11
good-natured,11
suffocating,10
hedonistic,10
feral,10
ornate,9
restrained,9
austere,9
resolute,8
distraught,8
springlike,7
consoling,7
outraged,7
funereal,6
jovial,6
regretful,6
ramshackle,6
jittery,5
effervescent,5
reserved,5
athletic,4
dignified,4
belligerent,3
benevolent,3
amiable,2
sprightly,2
feverish,2
insular,2
capricious,2
motoric,1
knotty,1
virile,1
hymn-like,1
translucent,1


I have come to a conclusion most emotion labels here are repetitive, I mean some emotion such as anger and aggression convey almost a similar essence, and since there are a lot of emotions, around ~200, for efficiency and to handle the class imbalance I have thought of combining the similar emotion labels into one, that way we can select the most prominent and effective emotions instead of confusing our model with 100s of labels. 
my plan for that (just a draft):
Major Emotion Category	Combined Labels	Description/Context	
Anger / Aggression	"aggressive, angry, fierce, hostile"	"Rock, metal, protest, intense themes"	
Joy / Positive Energy	"happy, cheerful, euphoric, upbeat"	"Dance, pop, celebratory songs"	
Sadness / Melancholy	"lonely, gloomy, melancholic, sorrowful"	"Ballads, reflective, breakup songs"	
Calm / Soothing	"relaxed, peaceful, gentle, soft"	"Lullabies, ambient, meditative tracks"	
Romantic / Erotic / Intimate	"romantic, passionate, sensual, warm"	"Love ballads, R&B, soulful slow jams"	
Fear / Eerie / Spooky	"eerie, spooky, menacing, anxious"	"Horror themes, suspenseful music"	
Nostalgia / Reflective	"nostalgic, sentimental, introspective"	"Memory, reminiscence, retrospectives"	
Excitement / Power	"intense, powerful, driving, explosive"	"Anthems, party tracks, motivational music"	
Playful / Quirky / Humorous	"silly, whimsical, funny, witty"	"Lighthearted, comedic, upbeat"	
Other / Unique Styles	"organic, atmospheric, exotic"	Genre or style-specific descriptions	
 

what do you think of this?


Plutchikâ€™s Wheel (anger, joy, sadness, fear, trust, disgust, surprise, anticipation) 



a newer approach is undergoing:
so the dataset also has valence_tags	arousal_tags	dominance_tags

they are better for classifying the emotions rather than relying on messy tags


so let's give this a quick shot there are 90001 songs each have their VAD values, base on that let's lable them and compare with our earlier classifiction. if it gives better result then we'll follow this, but if there's high class imbalance then we have to follow the earlier way.

give me Python code that results song title and their emotion tag in a new csv file, for all songs based on their VAD values.
the dataset looks something like:
lastfm_url,track,artist,seeds,number_of_emotion_tags,valence_tags,arousal_tags,dominance_tags,mbid,spotify_id,genre
https://www.last.fm/music/eminem/_/%2527till%2bi%2bcollapse,'Till I Collapse, Eminem,['aggressive'],6,4.55,5.273125,5.690625,cab93def-26c5-4fb0-bedd-26ec4c1619e1,4xkOaSrkexMciUUogZKVTS,rap


so the result of this approach was sth like:
ðŸ“Š Emotion distribution:
emotion_vad
neutral         51016
trust           21488
sadness          8993
disgust          3375
joy              2719
anticipation     1366
surprise          921
anger              66
fear               57
Name: count, dtype: int64

Ouch


maybe now a hybrid approach may rescue us:
tag based merging+ VAD refinements 


gtp agreed on these questions of mine:
oksy so you mean to say, the ones that can be merged will be merged, and the remaining will be classified based on vad refinements?

so the ones that could not be classified earlier will be labelled as neutral and later they will undergo the  vad based refinements? 



I like the work flow, here's how I want it to be like:


1. make a separate dataset with just the track name and their emotion seed along with vad values-> a new csv
2. extract the main/ the first emotion label, which is in the form of array (eg. ['aggressive', 'confrontational', 'intense', 'epic', 'desperate']) -> a new csv 
3. now merge them based on their similarity -> a new csv
4. the leftovers will be treated now with VAD refinements -> a new csv 
5. the final dataset with just the labels -> final csv 

how's this workflow, judge it and lets begin on the code part step by step
